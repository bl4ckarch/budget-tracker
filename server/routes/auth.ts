import express, { Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import { db } from '../database/init.js';
import { generateToken, authAttemptLogger } from '../middleware/auth.js';
import { authLimiter } from '../middleware/security.js';
import { validateRequired, validateEmail, throwValidationError } from '../middleware/errorHandler.js';
import { LoginCredentials, RegisterData, User } from '../types.js';
import { dbManager } from '../database/init.js';

const router = express.Router();

// Appliquer le rate limiting sur toutes les routes d'auth
router.use(authLimiter);

// Appliquer le logger d'authentification
router.use(authAttemptLogger);

// Route d'inscription
router.post('/register', async (req: Request, res: Response): Promise<Response | void> => {
  try {
    const { email, password, firstName }: RegisterData = req.body;

    // Validation des champs requis
    const requiredErrors = validateRequired(req.body, ['email', 'password', 'firstName']);
    if (requiredErrors.length > 0) {
      return res.status(400).json({
        error: 'Champs requis manquants',
        validationErrors: requiredErrors
      });
    }

    // Validation de l'email
    const emailErrors = validateEmail(email);
    if (emailErrors.length > 0) {
      return res.status(400).json({
        error: 'Email invalide',
        validationErrors: emailErrors
      });
    }

    // Validation du mot de passe
    if (password.length < 6) {
      return res.status(400).json({
        error: 'Le mot de passe doit contenir au moins 6 caract√®res'
      });
    }

    // Validation du pr√©nom
    if (firstName.length < 2) {
      return res.status(400).json({
        error: 'Le pr√©nom doit contenir au moins 2 caract√®res'
      });
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    db.get(
      'SELECT id FROM users WHERE email = ?',
      [email.toLowerCase()],
      async (err, existingUser): Promise<Response | void> => {
        if (err) {
          console.error('‚ùå Erreur v√©rification utilisateur existant:', err);
          return res.status(500).json({ error: 'Erreur serveur' });
        }

        if (existingUser) {
          return res.status(409).json({ 
            error: 'Un compte avec cet email existe d√©j√†',
            suggestion: 'Essayez de vous connecter ou utilisez un autre email'
          });
        }

        try {
          // Hasher le mot de passe
          const saltRounds = 12;
          const hashedPassword = await bcrypt.hash(password, saltRounds);

          // Cr√©er l'utilisateur
          db.run(
            'INSERT INTO users (email, password_hash, firstName) VALUES (?, ?, ?)',
            [email.toLowerCase(), hashedPassword, firstName],
            async function (err): Promise<Response | void> {
              if (err) {
                console.error('‚ùå Erreur cr√©ation utilisateur:', err);
                return res.status(500).json({ error: 'Erreur lors de la cr√©ation du compte' });
              }

              const userId = this.lastID;

              // G√©n√©rer un token JWT
              const token = generateToken({
                id: userId,
                email: email.toLowerCase(),
                firstName
              });

              // Cr√©er les param√®tres budg√©taires par d√©faut pour le mois actuel
              const now = new Date();
              const currentMonth = now.getMonth() + 1;
              const currentYear = now.getFullYear();

              db.run(
                'INSERT INTO user_budget_settings (user_id, month, year, monthly_salary, savings_goal) VALUES (?, ?, ?, ?, ?)',
                [userId, currentMonth, currentYear, 2750.00, 800.00],
                (err) => {
                  if (err) {
                    console.error('‚ùå Erreur cr√©ation param√®tres budget:', err);
                    // On continue m√™me si √ßa √©choue
                  } else {
                    console.log(`‚úÖ Param√®tres budg√©taires par d√©faut cr√©√©s pour ${currentMonth}/${currentYear}`);
                  }
                }
              );

              // AJOUTER LES CAT√âGORIES PAR D√âFAUT
              try {
                await dbManager.addMissingCategories(userId);
                console.log('‚úÖ Cat√©gories par d√©faut ajout√©es pour le nouvel utilisateur');
              } catch (categoryError) {
                console.error('‚ùå Erreur cr√©ation cat√©gories par d√©faut:', categoryError);
                // On continue m√™me si √ßa √©choue, l'utilisateur pourra cr√©er ses cat√©gories manuellement
              }

              return res.status(201).json({
                message: 'Compte cr√©√© avec succ√®s',
                token,
                user: {
                  id: userId,
                  email: email.toLowerCase(),
                  firstName
                }
              });
            }
          );
        } catch (hashError) {
          console.error('‚ùå Erreur hashage mot de passe:', hashError);
          return res.status(500).json({ error: 'Erreur lors de la cr√©ation du compte' });
        }
      }
    );
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale inscription:', error);
    return res.status(500).json({ error: 'Erreur serveur interne' });
  }
});

// Route de connexion
router.post('/login', (req: Request, res: Response): Response | void => {
  try {
    const { email, password }: LoginCredentials = req.body;

    // Validation des champs requis
    const requiredErrors = validateRequired(req.body, ['email', 'password']);
    if (requiredErrors.length > 0) {
      return res.status(400).json({
        error: 'Email et mot de passe requis',
        validationErrors: requiredErrors
      });
    }

    // Validation de l'email
    const emailErrors = validateEmail(email);
    if (emailErrors.length > 0) {
      return res.status(400).json({
        error: 'Format d\'email invalide',
        validationErrors: emailErrors
      });
    }

    // Rechercher l'utilisateur
    db.get(
      'SELECT id, email, password_hash, firstName, created_at FROM users WHERE email = ?',
      [email.toLowerCase()],
      async (err, user: any): Promise<Response | void> => {
        if (err) {
          console.error('‚ùå Erreur recherche utilisateur:', err);
          return res.status(500).json({ error: 'Erreur serveur' });
        }

        if (!user) {
          console.log('‚ùå Utilisateur non trouv√©:', email);
          return res.status(401).json({ 
            error: 'Email ou mot de passe incorrect',
            message: 'V√©rifiez vos identifiants et r√©essayez'
          });
        }

        try {
          // V√©rifier le mot de passe
          const passwordMatch = await bcrypt.compare(password, user.password_hash);

          if (!passwordMatch) {
            console.log('‚ùå Mot de passe incorrect pour:', email);
            return res.status(401).json({ 
              error: 'Email ou mot de passe incorrect',
              message: 'V√©rifiez vos identifiants et r√©essayez'
            });
          }

          console.log('‚úÖ Connexion r√©ussie pour:', email);

          // G√©n√©rer un token JWT
          const token = generateToken({
            id: user.id,
            email: user.email,
            firstName: user.firstName
          });

          return res.json({
            message: 'Connexion r√©ussie',
            token,
            user: {
              id: user.id,
              email: user.email,
              firstName: user.firstName,
              created_at: user.created_at
            }
          });
        } catch (compareError) {
          console.error('‚ùå Erreur comparaison mot de passe:', compareError);
          return res.status(500).json({ error: 'Erreur lors de la v√©rification du mot de passe' });
        }
      }
    );
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale connexion:', error);
    return res.status(500).json({ error: 'Erreur serveur interne' });
  }
});

// Route pour v√©rifier le token (utile pour le frontend)
router.get('/verify', (req: Request, res: Response): Response | void => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token manquant' });
  }

  try {
    const jwt = require('jsonwebtoken');
    const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';
    
    const decoded = jwt.verify(token, JWT_SECRET);
    
    // V√©rifier que l'utilisateur existe toujours
    db.get(
      'SELECT id, email, firstName, created_at FROM users WHERE id = ?',
      [decoded.id],
      (err, user: any): Response | void => {
        if (err) {
          console.error('‚ùå Erreur v√©rification utilisateur:', err);
          return res.status(500).json({ error: 'Erreur serveur' });
        }

        if (!user) {
          return res.status(401).json({ error: 'Utilisateur non trouv√©' });
        }

        return res.json({
          valid: true,
          user: {
            id: user.id,
            email: user.email,
            firstName: user.firstName,
            created_at: user.created_at
          }
        });
      }
    );
  } catch (error) {
    console.error('‚ùå Token invalide:', error);
    return res.status(401).json({ error: 'Token invalide' });
  }
});

// Route de d√©connexion (c√¥t√© client seulement, mais utile pour les logs)
router.post('/logout', (req: Request, res: Response): Response => {
  console.log('üëã POST /auth/logout appel√©');
  
  // En JWT, la d√©connexion se fait c√¥t√© client en supprimant le token
  // Ici on peut juste logger l'√©v√©nement
  
  return res.json({ 
    message: 'D√©connexion r√©ussie',
    instruction: 'Supprimez le token c√¥t√© client'
  });
});

// Route pour changer le mot de passe (n√©cessite d'√™tre connect√©)
router.post('/change-password', (req: Request, res: Response): Response | void => {
  console.log('üîë POST /auth/change-password appel√©');
  
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token d\'authentification requis' });
  }

  try {
    const jwt = require('jsonwebtoken');
    const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const { currentPassword, newPassword } = req.body;

    // Validation
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ error: 'Mot de passe actuel et nouveau mot de passe requis' });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ error: 'Le nouveau mot de passe doit contenir au moins 6 caract√®res' });
    }

    // V√©rifier l'utilisateur et le mot de passe actuel
    db.get(
      'SELECT id, password_hash FROM users WHERE id = ?',
      [decoded.id],
      async (err, user: any): Promise<Response | void> => {
        if (err) {
          console.error('‚ùå Erreur recherche utilisateur:', err);
          return res.status(500).json({ error: 'Erreur serveur' });
        }

        if (!user) {
          return res.status(401).json({ error: 'Utilisateur non trouv√©' });
        }

        try {
          // V√©rifier le mot de passe actuel
          const passwordMatch = await bcrypt.compare(currentPassword, user.password_hash);

          if (!passwordMatch) {
            return res.status(401).json({ error: 'Mot de passe actuel incorrect' });
          }

          // Hasher le nouveau mot de passe
          const saltRounds = 12;
          const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds);

          // Mettre √† jour le mot de passe
          db.run(
            'UPDATE users SET password_hash = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
            [hashedNewPassword, user.id],
            (err): Response | void => {
              if (err) {
                console.error('‚ùå Erreur mise √† jour mot de passe:', err);
                return res.status(500).json({ error: 'Erreur lors de la mise √† jour du mot de passe' });
              }

              console.log('‚úÖ Mot de passe chang√© pour l\'utilisateur:', user.id);
              return res.json({ message: 'Mot de passe modifi√© avec succ√®s' });
            }
          );
        } catch (error) {
          console.error('‚ùå Erreur traitement mot de passe:', error);
          return res.status(500).json({ error: 'Erreur serveur' });
        }
      }
    );
  } catch (error) {
    console.error('‚ùå Token invalide:', error);
    return res.status(401).json({ error: 'Token invalide' });
  }
});

export default router;