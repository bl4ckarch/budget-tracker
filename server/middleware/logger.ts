import { Request, Response, NextFunction } from 'express';
import { AuthRequest } from '../types';

// ==================== INTERFACES POUR LES LOGS ====================
interface LogEntry {
  timestamp: string;
  method: string;
  url: string;
  ip: string;
  userAgent: string;
  userId?: number;
  userEmail?: string;
  duration?: number;
  statusCode?: number;
  contentLength?: number;
  error?: string;
  budgetOperation?: string;
}

interface BudgetLogContext {
  operation: 'salary_update' | 'savings_update' | 'transaction_add' | 'budget_check' | 'expense_calculation';
  userId: number;
  month?: number;
  year?: number;
  amount?: number;
  category?: string;
  result?: 'success' | 'warning' | 'error';
  details?: string;
}

// ==================== CONFIGURATION DU LOGGER ====================
const LOG_CONFIG = {
  enableBody: process.env.NODE_ENV === 'development',
  enableHeaders: process.env.NODE_ENV === 'development',
  enableBudgetDetails: true,
  maxBodySize: 1000,
  sensitiveFields: ['password', 'token', 'authorization', 'password_hash'],
  excludePaths: ['/api/health', '/favicon.ico', '/assets'],
  budgetPaths: ['/api/transactions', '/budget-settings']
};

// ==================== FONCTIONS UTILITAIRES ====================
const sanitizeData = (data: any): any => {
  if (!data || typeof data !== 'object') return data;
  
  const sanitized = { ...data };
  
  LOG_CONFIG.sensitiveFields.forEach(field => {
    if (sanitized[field]) {
      sanitized[field] = '[REDACTED]';
    }
  });
  
  return sanitized;
};

const formatBytes = (bytes: number): string => {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

const getStatusColor = (status: number): string => {
  if (status >= 500) return 'üî¥'; // Erreur serveur
  if (status >= 400) return 'üü†'; // Erreur client
  if (status >= 300) return 'üü°'; // Redirection
  if (status >= 200) return 'üü¢'; // Succ√®s
  return '‚ö™'; // Autre
};

const getMethodColor = (method: string): string => {
  switch (method) {
    case 'GET': return 'üîµ';
    case 'POST': return 'üü¢';
    case 'PUT': return 'üü°';
    case 'DELETE': return 'üî¥';
    case 'PATCH': return 'üü£';
    default: return '‚ö™';
  }
};

const getBudgetOperationIcon = (operation: string): string => {
  switch (operation) {
    case 'salary_update': return 'üí∞';
    case 'savings_update': return 'üê∑';
    case 'transaction_add': return 'üí≥';
    case 'budget_check': return 'üìä';
    case 'expense_calculation': return 'üßÆ';
    default: return 'üìã';
  }
};

// ==================== LOGGER PRINCIPAL ====================
export const requestLogger = (req: Request, res: Response, next: NextFunction): void => {
  const start = Date.now();
  const timestamp = new Date().toISOString();
  
  // Skip logging pour certains paths
  if (LOG_CONFIG.excludePaths.some(path => req.originalUrl.includes(path))) {
    return next();
  }

  const baseLog: Partial<LogEntry> = {
    timestamp,
    method: req.method,
    url: req.originalUrl,
    ip: req.ip || req.connection.remoteAddress || 'unknown',
    userAgent: req.get('User-Agent') || 'unknown'
  };

  // D√©tecter si c'est une op√©ration budg√©taire
  const isBudgetOperation = LOG_CONFIG.budgetPaths.some(path => req.originalUrl.includes(path));

  // Log de la requ√™te entrante
  console.log(`\nüì° ${getMethodColor(req.method)} REQU√äTE ENTRANTE ${isBudgetOperation ? 'üí∞ [BUDGET]' : ''}`);
  console.log(`‚è∞ ${timestamp}`);
  console.log(`üåê ${req.method} ${req.originalUrl}`);
  console.log(`üìç IP: ${baseLog.ip}`);
  
  // Log de l'authentification
  if (req.headers.authorization) {
    console.log(`üîë Token pr√©sent`);
  }

  // Log du user si authentifi√©
  const authReq = req as AuthRequest;
  if (authReq.user) {
    console.log(`üë§ User: ${authReq.user.id} (${authReq.user.email})`);
    baseLog.userId = authReq.user.id;
    baseLog.userEmail = authReq.user.email;
    
    // Log sp√©cial pour les op√©rations budg√©taires
    if (isBudgetOperation) {
      logBudgetOperation(req, authReq.user);
    }
  }

  // Log du body pour POST/PUT en d√©veloppement
  if (LOG_CONFIG.enableBody && (req.method === 'POST' || req.method === 'PUT')) {
    if (req.body && Object.keys(req.body).length > 0) {
      const sanitizedBody = sanitizeData(req.body);
      const bodyStr = JSON.stringify(sanitizedBody, null, 2);
      
      if (isBudgetOperation) {
        console.log(`üí∞ DONN√âES BUDG√âTAIRES:`);
        logBudgetData(req.body, req.originalUrl);
      }
      
      if (bodyStr.length > LOG_CONFIG.maxBodySize) {
        console.log(`üì¶ Body (${formatBytes(bodyStr.length)}): [TRUNCATED]`);
        console.log(bodyStr.substring(0, LOG_CONFIG.maxBodySize) + '...');
      } else {
        console.log(`üì¶ Body (${formatBytes(bodyStr.length)}):`, sanitizedBody);
      }
    }
  }

  // Log des headers en d√©veloppement
  if (LOG_CONFIG.enableHeaders && req.headers) {
    const sanitizedHeaders = sanitizeData(req.headers);
    console.log(`üì® Headers:`, sanitizedHeaders);
  }

  // Override de res.json pour capturer les r√©ponses
  const originalJson = res.json;
  res.json = function(body: any) {
    res.locals.responseBody = body;
    
    // Log sp√©cial pour les r√©ponses budg√©taires
    if (isBudgetOperation && body) {
      logBudgetResponse(body, req.originalUrl, res.statusCode);
    }
    
    return originalJson.call(this, body);
  };

  // Log de la r√©ponse
  res.on('finish', () => {
    const duration = Date.now() - start;
    const contentLength = res.get('content-length');
    
    const logEntry: LogEntry = {
      ...baseLog,
      duration,
      statusCode: res.statusCode,
      contentLength: contentLength ? parseInt(contentLength) : undefined
    } as LogEntry;

    // Log color√© de la r√©ponse
    console.log(`\nüì§ ${getStatusColor(res.statusCode)} R√âPONSE ${isBudgetOperation ? 'üí∞ [BUDGET]' : ''}`);
    console.log(`‚è∞ ${new Date().toISOString()}`);
    console.log(`üîÑ ${req.method} ${req.originalUrl} - ${res.statusCode} (${duration}ms)`);
    
    if (contentLength) {
      console.log(`üì¶ Taille: ${formatBytes(parseInt(contentLength))}`);
    }

    // M√©triques de performance
    if (duration > 1000) {
      console.log(`‚ö†Ô∏è  Requ√™te lente d√©tect√©e: ${duration}ms`);
    }

    if (duration > 5000) {
      console.log(`üö® Requ√™te tr√®s lente: ${duration}ms - Investigation requise`);
    }

    // Log sp√©cial pour les erreurs budg√©taires
    if (res.statusCode >= 400 && isBudgetOperation) {
      console.log(`üí∞‚ùå ERREUR BUDG√âTAIRE: ${res.statusCode}`);
      if (res.locals.responseBody && res.locals.responseBody.error) {
        console.log(`üí∞üìù D√©tail: ${res.locals.responseBody.error}`);
      }
    }

    // S√©parateur pour lisibilit√©
    console.log(`${'‚îÄ'.repeat(60)}\n`);

    // Log structur√© pour les outils de monitoring
    if (process.env.NODE_ENV === 'production') {
      console.log(JSON.stringify(logEntry));
    }
  });

  next();
};

// ==================== LOGGER SP√âCIALIS√â POUR LES OP√âRATIONS BUDG√âTAIRES ====================
const logBudgetOperation = (req: Request, user: any): void => {
  const url = req.originalUrl;
  
  if (url.includes('/budget-settings')) {
    if (req.method === 'POST') {
      console.log(`üí∞‚öôÔ∏è  D√âFINITION BUDGET: User ${user.id}`);
    } else if (req.method === 'GET') {
      console.log(`üí∞üìä CONSULTATION BUDGET: User ${user.id}`);
    }
  } else if (url.includes('/transactions')) {
    if (req.method === 'POST') {
      console.log(`üí∞‚ûï AJOUT TRANSACTION: User ${user.id}`);
    } else if (url.includes('/summary')) {
      console.log(`üí∞üìã R√âSUM√â MENSUEL: User ${user.id}`);
    } else if (req.method === 'GET') {
      console.log(`üí∞üìÑ CONSULTATION TRANSACTIONS: User ${user.id}`);
    }
  }
};

const logBudgetData = (body: any, url: string): void => {
  if (url.includes('/budget-settings')) {
    if (body.monthly_salary) {
      console.log(`üí∞ Salaire mensuel: ${body.monthly_salary}‚Ç¨`);
    }
    if (body.savings_goal) {
      console.log(`üê∑ Objectif √©pargne: ${body.savings_goal}‚Ç¨`);
    }
  } else if (url.includes('/transactions') && body.amount) {
    console.log(`üí≥ Montant transaction: ${body.amount}‚Ç¨`);
    if (body.category_id) {
      console.log(`üìÅ Cat√©gorie ID: ${body.category_id}`);
    }
    if (body.description) {
      console.log(`üìù Description: ${body.description}`);
    }
  }
};

const logBudgetResponse = (body: any, url: string, statusCode: number): void => {
  if (statusCode >= 200 && statusCode < 300) {
    if (url.includes('/summary')) {
      console.log(`üí∞‚úÖ R√âSUM√â CALCUL√â:`);
      if (body.monthlySalary) console.log(`  üí∞ Salaire: ${body.monthlySalary}‚Ç¨`);
      if (body.totalExpenses) console.log(`  üí∏ D√©penses: ${body.totalExpenses}‚Ç¨`);
      if (body.actualSavings) console.log(`  üê∑ √âpargne: ${body.actualSavings}‚Ç¨`);
      if (body.remainingBudget !== undefined) {
        const icon = body.remainingBudget >= 0 ? '‚úÖ' : '‚ùå';
        console.log(`  ${icon} Reste: ${body.remainingBudget}‚Ç¨`);
      }
      if (body.alerts) {
        console.log(`  üö® Alertes: ${JSON.stringify(body.alerts)}`);
      }
    } else if (url.includes('/budget-settings')) {
      console.log(`üí∞‚úÖ PARAM√àTRES SAUVEGARD√âS`);
    } else if (body.budgetInfo) {
      console.log(`üí∞‚úÖ TRANSACTION AVEC BUDGET INFO:`);
      console.log(`  üí∞ Reste: ${body.budgetInfo.remainingBudget}‚Ç¨`);
      if (body.warnings && body.warnings.length > 0) {
        console.log(`  ‚ö†Ô∏è  Avertissements: ${body.warnings.join(', ')}`);
      }
    }
  }
};

// ==================== LOGGER POUR L'AUTHENTIFICATION ====================
export const authLogger = (req: Request, res: Response, next: NextFunction): void => {
  console.log(`üîê AUTH: ${req.method} ${req.originalUrl}`);
  
  if (req.method === 'POST') {
    if (req.originalUrl.includes('/login')) {
      console.log(`üìß Tentative de connexion: ${req.body?.email || 'email manquant'}`);
    } else if (req.originalUrl.includes('/register')) {
      console.log(`üìù Tentative d'inscription: ${req.body?.email || 'email manquant'}`);
      console.log(`üë§ Nom: ${req.body?.firstName || 'nom manquant'}`);
    }
  }

  // Log du r√©sultat apr√®s traitement
  res.on('finish', () => {
    if (res.statusCode === 200 || res.statusCode === 201) {
      if (req.originalUrl.includes('/login')) {
        console.log(`‚úÖ Connexion r√©ussie pour: ${req.body?.email}`);
      } else if (req.originalUrl.includes('/register')) {
        console.log(`‚úÖ Inscription r√©ussie pour: ${req.body?.email}`);
      }
    } else {
      console.log(`‚ùå √âchec authentification (${res.statusCode}): ${req.body?.email}`);
    }
  });

  next();
};

// ==================== LOGGER POUR LES TRANSACTIONS ====================
export const transactionLogger = (req: Request, res: Response, next: NextFunction): void => {
  const authReq = req as AuthRequest;
  console.log(`üí∞ TRANSACTION: ${req.method} ${req.originalUrl}`);
  
  if (authReq.user) {
    console.log(`üë§ User ${authReq.user.id} (${authReq.user.email})`);
    
    // Log d√©taill√© selon l'op√©ration
    if (req.method === 'POST' && req.body) {
      console.log(`‚ûï Ajout transaction: ${req.body.amount}‚Ç¨`);
    } else if (req.method === 'PUT') {
      console.log(`‚úèÔ∏è Modification transaction ID: ${req.params.id}`);
    } else if (req.method === 'DELETE') {
      console.log(`üóëÔ∏è Suppression transaction ID: ${req.params.id}`);
    } else if (req.method === 'GET' && req.originalUrl.includes('/summary')) {
      console.log(`üìä Demande r√©sum√©: ${req.params.month}/${req.params.year}`);
    } else if (req.method === 'GET') {
      console.log(`üìÑ Consultation transactions: ${req.params.month}/${req.params.year}`);
    }
  }

  next();
};

// ==================== LOGGER POUR LES CAT√âGORIES ====================
export const categoryLogger = (req: Request, res: Response, next: NextFunction): void => {
  const authReq = req as AuthRequest;
  console.log(`üìÅ CATEGORY: ${req.method} ${req.originalUrl}`);
  
  if (authReq.user) {
    console.log(`üë§ User ${authReq.user.id} (${authReq.user.email})`);
    
    if (req.method === 'POST' && req.body) {
      console.log(`‚ûï Cr√©ation cat√©gorie: ${req.body.name} (${req.body.type}) - Budget: ${req.body.budget_amount}‚Ç¨`);
    } else if (req.method === 'PUT') {
      console.log(`‚úèÔ∏è Modification cat√©gorie ID: ${req.params.id}`);
    } else if (req.method === 'DELETE') {
      console.log(`üóëÔ∏è Suppression cat√©gorie ID: ${req.params.id}`);
    }
  }

  next();
};

// ==================== LOGGER POUR LES PARAM√àTRES BUDG√âTAIRES ====================
export const budgetSettingsLogger = (req: Request, res: Response, next: NextFunction): void => {
  const authReq = req as AuthRequest;
  console.log(`‚öôÔ∏è BUDGET SETTINGS: ${req.method} ${req.originalUrl}`);
  
  if (authReq.user) {
    console.log(`üë§ User ${authReq.user.id} (${authReq.user.email})`);
    console.log(`üìÖ P√©riode: ${req.params.month}/${req.params.year}`);
    
    if (req.method === 'POST' && req.body) {
      console.log(`üí∞ Nouveau salaire: ${req.body.monthly_salary}‚Ç¨`);
      console.log(`üê∑ Nouvel objectif √©pargne: ${req.body.savings_goal}‚Ç¨`);
      
      // Calculer et afficher la r√©partition budg√©taire
      const salary = req.body.monthly_salary;
      const savings = req.body.savings_goal;
      const remaining = salary - savings;
      const savingsPercentage = ((savings / salary) * 100).toFixed(1);
      
      console.log(`üìä R√©partition budg√©taire:`);
      console.log(`   üí∞ Salaire: ${salary}‚Ç¨ (100%)`);
      console.log(`   üê∑ √âpargne: ${savings}‚Ç¨ (${savingsPercentage}%)`);
      console.log(`   üí∏ Disponible d√©penses: ${remaining}‚Ç¨ (${(100 - parseFloat(savingsPercentage)).toFixed(1)}%)`);
      
      if (remaining < 0) {
        console.log(`   ‚ùå ATTENTION: Budget incoh√©rent (√©pargne > salaire)`);
      } else if (remaining < 500) {
        console.log(`   ‚ö†Ô∏è  ATTENTION: Marge tr√®s faible pour les d√©penses`);
      }
    }
  }

  next();
};

// ==================== LOGGER D'ERREURS SP√âCIALIS√â ====================
export const errorLogger = (error: any, req: Request): void => {
  console.error('\nüí• ==================== ERREUR D√âTAILL√âE ====================');
  console.error(`üìç URL: ${req.method} ${req.originalUrl}`);
  console.error(`‚è∞ Timestamp: ${new Date().toISOString()}`);
  console.error(`üîç IP: ${req.ip}`);
  
  // Log sp√©cial pour utilisateur authentifi√©
  const authReq = req as AuthRequest;
  if (authReq.user) {
    console.error(`üë§ User: ${authReq.user.id} (${authReq.user.email})`);
  }

  console.error(`üí• Error Type: ${error.constructor.name}`);
  console.error(`üìù Message: ${error.message}`);
  console.error(`üìä Status Code: ${error.statusCode || 'N/A'}`);
  
  // Log sp√©cial pour les erreurs budg√©taires
  if (error.budgetRelated) {
    console.error(`üí∞ ERREUR BUDG√âTAIRE D√âTECT√âE`);
    if (req.body) {
      console.error(`üí∞ Donn√©es concern√©es:`, sanitizeData(req.body));
    }
  }
  
  // Log des erreurs de validation
  if (error.validationErrors && error.validationErrors.length > 0) {
    console.error(`üìã Erreurs de validation:`);
    error.validationErrors.forEach((err: any, index: number) => {
      console.error(`   ${index + 1}. ${err.field}: ${err.message} (valeur: ${err.value})`);
    });
  }
  
  if (process.env.NODE_ENV === 'development') {
    console.error(`üîç Stack trace:\n${error.stack}`);
  }
  
  console.error('üí• =========================================================\n');
};

// ==================== LOGGER DE PERFORMANCE BUDG√âTAIRE ====================
export const budgetPerformanceLogger = (): void => {
  const now = new Date();
  const currentMonth = now.getMonth() + 1;
  const currentYear = now.getFullYear();
  
  console.log('\nüìä ==================== PERFORMANCE BUDGET ====================');
  console.log(`‚è∞ Check √†: ${now.toISOString()}`);
  console.log(`üìÖ Mois actuel: ${currentMonth}/${currentYear}`);
  console.log(`üíæ M√©moire utilis√©e: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
  console.log(`‚è±Ô∏è  Uptime: ${Math.floor(process.uptime())}s`);
  console.log(`üí∞ Syst√®me: Budget Tracker bas√© sur salaire mensuel`);
  console.log(`üéØ Fonctionnalit√©s actives:`);
  console.log(`   ‚úÖ Calculs automatiques de budget`);
  console.log(`   ‚úÖ Alertes de d√©passement`);
  console.log(`   ‚úÖ Suivi pourcentages vs salaire`);
  console.log(`   ‚úÖ Validation coh√©rence budg√©taire`);
  console.log('üìä ============================================================\n');
};

// ==================== LOGGER POUR LES OP√âRATIONS CRITIQUES ====================
export const criticalOperationLogger = (
  operation: string, 
  userId: number, 
  details: any,
  success: boolean = true
): void => {
  const timestamp = new Date().toISOString();
  const status = success ? '‚úÖ' : '‚ùå';
  
  console.log(`\nüö® ${status} OP√âRATION CRITIQUE: ${operation}`);
  console.log(`‚è∞ ${timestamp}`);
  console.log(`üë§ User ID: ${userId}`);
  console.log(`üìã D√©tails:`, details);
  
  if (!success) {
    console.log(`üí• √âchec de l'op√©ration critique - Investigation requise`);
  }
  
  console.log(`üö® ================================================\n`);
};

// ==================== LOGGER POUR LES M√âTRIQUES BUDG√âTAIRES ====================
export const budgetMetricsLogger = (
  userId: number,
  metrics: {
    month: number;
    year: number;
    salary: number;
    totalExpenses: number;
    savings: number;
    budgetUsage: number;
    savingsRate: number;
  }
): void => {
  console.log(`\nüìä M√âTRIQUES BUDG√âTAIRES - User ${userId}`);
  console.log(`üìÖ P√©riode: ${metrics.month}/${metrics.year}`);
  console.log(`üí∞ Salaire: ${metrics.salary}‚Ç¨`);
  console.log(`üí∏ D√©penses: ${metrics.totalExpenses}‚Ç¨ (${((metrics.totalExpenses / metrics.salary) * 100).toFixed(1)}%)`);
  console.log(`üê∑ √âpargne: ${metrics.savings}‚Ç¨ (${metrics.savingsRate.toFixed(1)}%)`);
  console.log(`üìä Utilisation budget: ${metrics.budgetUsage.toFixed(1)}%`);
  
  // Indicateurs de sant√© budg√©taire
  if (metrics.budgetUsage > 100) {
    console.log(`üö® ALERTE: Budget d√©pass√© de ${(metrics.budgetUsage - 100).toFixed(1)}%`);
  } else if (metrics.budgetUsage > 90) {
    console.log(`‚ö†Ô∏è  ATTENTION: Budget presque √©puis√© (${metrics.budgetUsage.toFixed(1)}%)`);
  } else if (metrics.budgetUsage < 50) {
    console.log(`üí° INFO: Utilisation budget faible - Potentiel d'√©pargne suppl√©mentaire`);
  } else {
    console.log(`‚úÖ Utilisation budget saine`);
  }
  
  console.log(`üìä ===============================================\n`);
};

// ==================== SYST√àME DE NOTIFICATION CONSOLE ====================
export const logBudgetAlert = (
  type: 'budget_exceeded' | 'savings_goal_achieved' | 'low_balance' | 'high_spending',
  userId: number,
  details: any
): void => {
  const icons = {
    budget_exceeded: 'üö®',
    savings_goal_achieved: 'üéâ',
    low_balance: '‚ö†Ô∏è',
    high_spending: 'üìà'
  };
  
  const messages = {
    budget_exceeded: 'BUDGET D√âPASS√â',
    savings_goal_achieved: 'OBJECTIF √âPARGNE ATTEINT',
    low_balance: 'SOLDE FAIBLE',
    high_spending: 'D√âPENSES √âLEV√âES'
  };
  
  console.log(`\n${icons[type]} ALERTE BUDG√âTAIRE: ${messages[type]}`);
  console.log(`üë§ User: ${userId}`);
  console.log(`‚è∞ ${new Date().toISOString()}`);
  console.log(`üìã D√©tails:`, details);
  console.log(`${icons[type]} ===============================================\n`);
};

// ==================== EXPORT DES FONCTIONS ====================


// ==================== INITIALISATION DU MONITORING ====================
// Lancer le monitoring de performance toutes les 5 minutes
if (process.env.NODE_ENV !== 'test') {
  setInterval(budgetPerformanceLogger, 300000);
}